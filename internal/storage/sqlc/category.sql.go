// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countCategories = `-- name: CountCategories :one
SELECT COUNT(id) FROM categories
`

func (q *Queries) CountCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name) VALUES ($1) RETURNING name
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, createCategory, name)
	err := row.Scan(&name)
	return name, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE name = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteCategory, name)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT id, name, created_at FROM categories
`

type GetCategoriesRow struct {
	ID        int32
	Name      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetCategories(ctx context.Context) ([]GetCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesRow
	for rows.Next() {
		var i GetCategoriesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, name FROM categories WHERE name = $1
`

type GetCategoryRow struct {
	ID   int32
	Name string
}

func (q *Queries) GetCategory(ctx context.Context, name string) (GetCategoryRow, error) {
	row := q.db.QueryRow(ctx, getCategory, name)
	var i GetCategoryRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories SET name = $1 WHERE name = $2 RETURNING name
`

type UpdateCategoryParams struct {
	Name   string
	Name_2 string
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (string, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.Name, arg.Name_2)
	var name string
	err := row.Scan(&name)
	return name, err
}
